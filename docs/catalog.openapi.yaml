openapi: 3.0.4
info:
  title: Bebra
  version: 0.1.0
servers:
  - url: http://localhost:8080/catalog
    description: Local dev server
paths:
  /v1/files:
    post:
      tags:
        - Files
      summary: >-
        Create a new file upload. Accepts data in various formats (plain text,
        html, md, pdf, doc, epub).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        '201':
          description: Successfully posted
          content:
            application/json:
              schema:
                type: string
  /v1/files/{name}:
    get:
      tags:
        - Files
      summary: Get a file by name
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Success
    delete:
      tags:
        - Files
      summary: Delete a file by ID
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Successfully deleted
  /v1/files/{name}/info:
    get:
      tags:
        - Files
      summary: Get a file MinIO info
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Success
  /v1/request:
    post:
      tags:
        - Request
      summary: Post a new book request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequestForm'
      responses:
        '201':
          description: Successfully posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookRequest'
    get:
      tags:
        - Request
      summary: Get all book requests
      responses:
        '200':
          description: Successfully posted
  /v1/request/{id}:
    get:
      tags:
        - Request
      summary: Get a book request by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookRequest'
    delete:
      tags:
        - Request
      summary: Delete a book request by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Successfully deleted
  /v1/request/{id}/publish:
    post:
      tags:
        - Request
      summary: Publish a book request by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Success
  /v1/request/{id}/document:
    get:
      tags:
        - Request
      summary: Get a book request by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Success TODO
  /v1/request/{id}/tags:
    get:
      tags:
        - Request
      summary: Get request tags
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Success
    delete:
      tags:
        - Request
      summary: Delete a tag from request
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
        - in: query
          name: tag
          schema:
            type: string
      responses:
        '204':
          description: Success
    post:
      summary: Add a tag to request
      tags:
        - Request
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
        - in: query
          name: tag
          schema:
            type: string
      responses:
        '201':
          description: Success
  /v1/book:
    get:
      tags:
        - Books
      summary: Get all books
      responses:
        '200':
          description: Success
  /v1/book/{id}:
    get:
      tags:
        - Books
      summary: Get a book by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    delete:
      tags:
        - Books 
      summary: Delete a book by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Successfully deleted
  /v1/book/{id}/tags:
    get:
      tags:
        - Books
      summary: Get book tags
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Success
    delete:
      tags:
        - Books
      summary: Delete a tag from book
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
        - in: query
          name: tag
          schema:
            type: string
      responses:
        '204':
          description: Success
    post:
      summary: Add a tag to book
      tags:
        - Books
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
        - in: query
          name: tag
          schema:
            type: string
      responses:
        '201':
          description: Success
  /v1/author:
    post:
      tags:
        - Author
      summary: Post a new author
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorForm'
      responses:
        '201':
          description: Successfully posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    get:
      tags:
        - Author
      summary: Get all authors
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
  /v1/author/{id}:
    get:
      tags:
        - Author
      summary: Get an author by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    delete:
      tags:
        - Author
      summary: Delete an author with ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '204':
          description: Successfully deleted
  /v1/tag:
    post:
      tags:
        - Tag
      summary: Post a new tag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      responses:
        '201':
          description: Successfully posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
  /v1/tag/{name}:
    get:
      tags:
        - Tag
      summary: Get a tag by name
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
    delete:
      tags:
        - Tag
      summary: Delete a tag with name
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Successfully deleted
  /v1/tag/all:
    get:
      tags:
        - Tag
      summary: Get all tags
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
components:
  schemas:
    Book:
      type: object
      required:
        - id
        - filename
        - title
        - author_name
        - description
        - category
        - language_code
        - tags
      properties:
        id:
          type: integer
          format: int32
          example: 1
        filename:
          type: string
          example: s37djwf690seks23/doc.pdf
        title:
          type: string
          example: Harry Potter
        author_name:
          type: string
          example: J.K. Rowling
        description:
          type: string
          example: Book about Harry Potter
        category:
          type: string
          example: Fiction
        language_code:
          type: string
          example: EN
        tags:
          type: array
          items:
            type: string
          example:
            - Fantasy
            - Children
    BookRequest:
      type: object
      required:
        - id
        - filename
        - title
        - author_name
        - description
        - category
        - language_code
        - tags
      properties:
        id:
          type: integer
          format: int32
          example: 1
        filename:
          type: string
          example: s37djwf690seks23/doc.pdf
        title:
          type: string
          example: Harry Potter
        author_name:
          type: string
          example: J.K. Rowling
        description:
          type: string
          example: Book about Harry Potter
        category:
          type: string
          example: Fiction
        language_code:
          type: string
          example: EN
        tags:
          type: array
          items:
            type: string
          example:
            - Fantasy
            - Children
    BookRequestForm:
      type: object
      required:
        - filename
        - title
        - author_name
        - description
        - category
        - language_code
      properties:
        filename:
          type: string
          example: req_26fe31cd-77d9-415d-881f-0bfc9ed2dcc9.pdf
        title:
          type: string
          example: Harry Potter
        author_name:
          type: string
          example: J.K. Rowling
        description:
          type: string
          example: Book about Harry Potter
        category:
          type: string
          example: Fiction
        language_code:
          type: string
          example: EN
        tags:
          type: array
          items:
            type: string
          example:
            - Fantasy
            - Children
    Author:
      type: object
      required:
        - id
        - name
        - description
        - photo_url
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: Arthur Schopenhauer
        description:
          type: string
          example: The first ghoul philosopher in the world
        photo_url:
          type: string
          example: https://photos.com/schopenhauer
    AuthorForm:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          example: Arthur Schopenhauer
        description:
          type: string
          example: The first ghoul philosopher in the world
        photo_url:
          type: string
          example: https://photos.com/schopenhauer
    Tag:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Rust
